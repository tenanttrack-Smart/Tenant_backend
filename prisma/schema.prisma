// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name String
  email String @unique
  password String
  role   Role @default(TENANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    @@map("users")


  // Relations
  leasesAsTenant   Lease[] @relation("TenantLeases")
  leasesAsLandlord Lease[] @relation("LandlordLeases")
  payments         Payment[] @relation("TenantPayments")
  processedPayments Payment[] @relation("StaffProcessedPayments")
}
 enum Role {
  LANDLORD
  TENANT
  STAFF
}
 model Property {
  id        String   @id @default(uuid())
  title     String
  address   String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  leases Lease[]
}
model Lease {
  id        String   @id @default(uuid())
  tenantId  String
  landlordId String
  propertyId String
  startDate DateTime
  endDate   DateTime
  rentAmount Float
  paymentFrequency String  @default("monthly")
  status    String         @default("active")
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 // Relations

   tenant   User     @relation("TenantLeases", fields: [tenantId], references: [id])
  landlord User     @relation("LandlordLeases", fields: [landlordId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
  payments Payment[]
}

// -------------------- PAYMENTS --------------------
model Payment {
  id         String   @id @default(uuid())
  tenantId   String
  leaseId    String
  staffId    String?   // optional: staff who processed
  amount     Float
  paymentDate DateTime @default(now())
  paymentMethod String?
  paymentStatus String   @default("pending")
  notes      String?

  // Relations
  tenant User  @relation("TenantPayments", fields: [tenantId], references: [id])
  lease  Lease @relation(fields: [leaseId], references: [id])
  staff  User? @relation("StaffProcessedPayments", fields: [staffId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

